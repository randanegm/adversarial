!obj:pylearn2.train.Train {
  dataset: &train !obj:adversarial.lfw.dataset.LFW {
    axes: ['c', 0, 1, 'b'],
    gcn: 55.,
    lfw_path: 'content/lfwcrop_color/faces',
    filelist_path: 'adversarial/data/lfwcrop_color/filelist.train.ids.txt',
    embedding_file:'adverserial/data/lfwcrop_color/embeddings/LFW_attributes_30d.npz',
    
    img_shape: [3, 32, 32],
    # which_set: 'train',
#   start: 0,
#   stop: 16
  },
  model: !obj:adversarial.conditional.retrain.RetrainingConditionalAdversaryPair {
    pretrained_model: !pkl: "lfwcrop_convolutional.pkl",
    condition_space: &condition_space !obj:pylearn2.space.VectorSpace {
      dim: 30,
      dtype: 'float32'
    },
    condition_distribution: &condition_distribution !obj:adversarial.distributions.KernelDensityEstimateDistribution {
      X: !obj:adversarial.util.load_numpy_obj {
        file: '/afs/cs.stanford.edu/u/jgauthie/scr/lfw-lsa/LFW_attributes_30d.npz',
        key: 'arr_0',
      },
      bandwidth: 1, # TODO tune
    },

    generator_new_W_irange: 0.005, # TODO tune
    input_source: ['features', 'condition'],

    # Identity function
    discriminator_condition_mlp: !obj:pylearn2.models.mlp.MLP {
      layer_name: 'condition_mlp',
      layers: [
        !obj:adversarial.util.IdentityLayer {
          layer_name: 'condition_identity'
        }
      ]
    },

    discriminator_joint_mlp: !obj:pylearn2.models.mlp.MLP {
      layer_name: 'joint_mlp',
#     input_source: ['data', 'condition'],
      layers: [
        !obj:pylearn2.models.mlp.Sigmoid {
          #W_lr_scale: .1,
          #b_lr_scale: .1,
          #max_col_norm: 1.9365,
          layer_name: 'y',
          dim: 1,
          irange: .005
        }
      ]
    },
  },
  algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
    batch_size: 128,
    learning_rate: 0.004,
    learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
      init_momentum: .5,
    },
    monitoring_dataset: {
      #'train' : *train,
      'valid' : !obj:adversarial.lfw.dataset.LFW {
        axes: ['c', 0, 1, 'b'],
        gcn: 55,
        lfw_path: 'content/lfwcrop_color/faces',
        filelist_path: 'adversarial/data/lfwcrop_color/filelist.dev.ids.txt',
        embedding_file:'adverserial/data/lfwcrop_color/embeddings/LFW_attributes_30d.npz',
        img_shape: [3, 32, 32],
        # which_set: 'train',
#       start: 0,
#       stop: 16
      }
      #'test'  : !obj:pylearn2.datasets.cifar10.CIFAR10 {
      #              which_set: 'test',
      #              gcn: 55.,
      #          }
    },
    cost: !obj:adversarial.conditional.ConditionalAdversaryCost {
      condition_distribution: *condition_distribution,
      scale_grads: 0,
      #target_scale: .1,
      discriminator_default_input_include_prob: .5,
      discriminator_input_include_probs: {
        'dh0': .8
      },
      discriminator_default_input_scale: 2.,
      discriminator_input_scales: {
        'dh0': 1.25
      }
    },
    #termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
    #    channel_name: "valid_y_misclass",
    #    prop_decrease: 0.,
    #    N: 100
    #},
    update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
      decay_factor: 1.000004,
      min_lr: .000001
    }
  },
  extensions: [
    #!obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
    #     channel_name: 'valid_y_misclass',
    #     save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
    #},
    !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
      start: 1,
      saturate: 250,
      final_momentum: .7
    }
  ],

  save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
  save_freq: 5,
}
